// ./backend/prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Staff {
  id            String    @id @default(uuid())
  name          String
  role          StaffRole
  username      String    @unique
  passwordHash  String
  isActive      Boolean   @default(true)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  confirmedReservations Reservation[] @relation("ConfirmedByStaff")
  diningSessionsOpened  DiningSession[] @relation("OpenedByStaff") // Relation to DiningSession
  ordersTaken           Order[]         @relation("TakenByStaff") // For later
  billsGenerated        Bill[]          @relation("GeneratedByStaff") // For later

  @@map("staff")
}

enum StaffRole {
  MANAGER
  WAITER
  CASHIER
  KITCHEN_STAFF
}

model MenuItem {
  id            String    @id @default(uuid())
  name          String    @unique
  description   String?
  price         Float
  isAvailable   Boolean   @default(true)
  tags          String[]  @default([])
  imageUrl      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  // categoryId    String?
  // MenuCategory  MenuCategory? @relation(fields: [categoryId], references: [id])

  OrderItems OrderItem[] // For later

  @@map("menu_items")
}

// New Models
model Customer {
  id           String        @id @default(uuid())
  name         String
  contactPhone String?       @unique // Optional, but unique if provided
  contactEmail String?       @unique // Optional, but unique if provided
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  reservations Reservation[]

  @@map("customers")
}

model Table {
  id           String            @id @default(uuid())
  tableNumber  String            @unique
  capacity     Int
  status       TableStatus       @default(AVAILABLE)
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  reservations Reservation[]     @relation("ReservedTable")
  diningSessions DiningSession[] // Relation to DiningSession

  @@map("tables")
}

enum TableStatus {
  AVAILABLE
  OCCUPIED
  RESERVED
  NEEDS_CLEANING
  OUT_OF_SERVICE
}

model Reservation {
  id            String            @id @default(uuid())
  customerId    String
  customer      Customer          @relation(fields: [customerId], references: [id])
  tableId       String?
  table         Table?            @relation("ReservedTable", fields: [tableId], references: [id])
  staffIdConfirmedBy String?
  confirmedBy   Staff?            @relation("ConfirmedByStaff", fields: [staffIdConfirmedBy], references: [id])
  reservationTime DateTime
  partySize     Int
  status        ReservationStatus @default(PENDING)
  notes         String?
  createdAt     DateTime          @default(now())
  updatedAt     DateTime          @updatedAt
  diningSession DiningSession?    // Relation to DiningSession (one-to-one if reservation starts one session)

  @@map("reservations")
}

enum ReservationStatus {
  PENDING     // Customer requested, staff needs to confirm
  CONFIRMED   // Staff confirmed
  CANCELLED   // Cancelled by customer or staff
  SEATED      // Customer has been seated (linked to a DiningSession)
  COMPLETED   // Reservation fulfilled (after customer left)
  NO_SHOW
}

model DiningSession {
  id                 String             @id @default(uuid())
  tableId            String?
  table              Table?             @relation(fields: [tableId], references: [id])
  reservationId      String?            @unique // A reservation can only start one dining session
  reservation        Reservation?       @relation(fields: [reservationId], references: [id])
  staffIdOpenedBy    String
  openedBy           Staff              @relation("OpenedByStaff", fields: [staffIdOpenedBy], references: [id])
  partyIdentifier    String?            // e.g., Customer name for walk-in, or notes
  partySize          Int                // Number of guests in this session
  startTime          DateTime           @default(now())
  endTime            DateTime?          // When the session is closed (e.g., after payment)
  status             DiningSessionStatus @default(ACTIVE)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  orders             Order[]            // For later
  bill               Bill?              // For later

  @@map("dining_sessions")
}

enum DiningSessionStatus {
  ACTIVE   // Party is currently seated and ordering/eating
  BILLED   // Bill has been generated for this session
  CLOSED   // Payment complete, session ended
}

model Order {
  id                String      @id @default(uuid())
  diningSessionId   String
  diningSession     DiningSession @relation(fields: [diningSessionId], references: [id])
  staffIdTakenBy    String
  takenBy           Staff       @relation("TakenByStaff", fields: [staffIdTakenBy], references: [id])
  orderTime         DateTime    @default(now())
  status            OrderStatus @default(PENDING)
  notes             String?     // Overall order notes (e.g., "serve all at once")
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt
  items             OrderItem[] // Relation to OrderItem

  @@map("orders")
}

enum OrderStatus {
  PENDING           // Order taken, not yet sent to kitchen or kitchen hasn't started
  PREPARING         // Kitchen is actively working on the order
  READY             // All items in the order are ready to be served
  SERVED            // Order has been delivered to the table
  CANCELLED         // Order was cancelled
  ACTION_REQUIRED   // An item in the order needs attention (e.g. sold out)
}

model OrderItem {
  id                  String           @id @default(uuid())
  orderId             String
  order               Order            @relation(fields: [orderId], references: [id], onDelete: Cascade)
  menuItemId          String
  menuItem            MenuItem         @relation(fields: [menuItemId], references: [id])
  quantity            Int
  priceAtOrderTime    Float            // Store price when ordered, as menu price can change
  specialRequests     String?
  status              OrderItemStatus  @default(PENDING) // Status for individual items
  createdAt           DateTime         @default(now())
  updatedAt           DateTime         @updatedAt

  @@map("order_items")
}

enum OrderItemStatus {
  PENDING       // Item added to order
  PREPARING     // Kitchen started preparing this specific item
  READY         // Item is ready
  SERVED        // Item served
  CANCELLED     // Item cancelled from order
  SOLD_OUT      // Item marked as sold out by kitchen after order placed
}

// New Model for Bill
model Bill {
  id                       String    @id @default(uuid())
  diningSessionId          String    @unique // Each session has one bill
  diningSession            DiningSession @relation(fields: [diningSessionId], references: [id])
  staffIdGeneratedBy       String
  generatedBy              Staff     @relation("GeneratedByStaff", fields: [staffIdGeneratedBy], references: [id])
  generationTime           DateTime  @default(now())
  subtotalAmount           Float     // Calculated from served order items
  taxAmount                Float     @default(0.00) // Can be calculated or configurable
  discountAmount           Float     @default(0.00) // If discounts are applied
  totalAmount              Float     // subtotal + tax - discount
  status                   BillStatus @default(UNPAID)
  paymentConfirmationTime  DateTime? // When payment was confirmed
  paymentMethod            String?   // e.g., "Cash", "Credit Card", "Mobile Payment"
  notes                    String?   // Any notes related to the bill or payment
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  @@map("bills")
}

enum BillStatus {
  UNPAID
  PAID
  VOID // If a bill was generated incorrectly and then voided
}